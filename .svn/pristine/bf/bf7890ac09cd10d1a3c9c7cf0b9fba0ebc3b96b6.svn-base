package utils;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

public class Utils
{
	public static byte [] readBinaryFile(File file)
	{
		int length = (int)file.length();
		if(length <= 0)
		{
			JOptionPane.showMessageDialog(null, "File "+file.getAbsolutePath()+" is empty or doesn't exist");
			return null;
		}
		byte [] binaryBody = new byte [length];
		InputStream input = null;
		int totalBytesRead = 0;
		try
		{
			input = new BufferedInputStream(new FileInputStream(file));
			while(totalBytesRead < length)
			{
				int bytesRemaining = length - totalBytesRead;
				int bytesRead = input.read(binaryBody,totalBytesRead, bytesRemaining);
				if(bytesRead > 0 )
					totalBytesRead = totalBytesRead + bytesRead;
			}
		} catch (IOException e)
		{
			e.printStackTrace();
			return null;
		}
		return binaryBody;
	}
	
	public static boolean storeBynaryToFile(byte [] binary, String fileName)
	{
		if(binary == null || binary.length <= 0)
		{
			JOptionPane.showMessageDialog(null, "Empty binary data");
			return false;
		}
		try
		{
			OutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(fileName)));
			stream.write(binary);
			stream.close();
		} catch (IOException e)
		{
			JOptionPane.showMessageDialog(null, exceptionAsString(e));
			return false;
		}
		return false;
	}
	
	public static String exceptionAsString(Throwable e)
	{
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw);
		e.printStackTrace(pw);
		return sw.toString();
	}
	
	public static List<String> getReportsRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("reportInteractionHistory");
		retVal.add("reportTransactionPerTenant");
		retVal.add("reportHitMapPerformance");
		return retVal;
	}
	
	public static List<String> getImagesRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("imageGetByName");
		retVal.add("imageGetMetadataByName");
		retVal.add("imageCreateMetadata");
		retVal.add("imageUpdateMetadata");
		retVal.add("imageCreateDeviceObject");
		retVal.add("imageUpdateDeviceObject");
		retVal.add("imageCreateBitmap");
		retVal.add("imageUpdateBitmap");
		retVal.add("imageDeleteImageByName");
		retVal.add("imageDeleteImageByNameAndDeviceId");
		retVal.add("imageExportAll");
		retVal.add("imageGetByHeightAndWidth");
		return retVal;
	}
	
	public static List<String> getEmailRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("emailCreateUpdateSettings");
		retVal.add("emailGetSettings");
		retVal.add("emailConnectToServer");
		retVal.add("emailCheckConnection");
		retVal.add("emailTestEmail");
		return retVal;
	}
	
	public static List<String> getInteractioRuntimeRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("getInteractionsList");
		retVal.add("createInteraction");
		retVal.add("navigationCurrent");
		retVal.add("navigationNext");
		retVal.add("navigationBack");
		retVal.add("navigationBackParam");
		retVal.add("navigationFinish");
		return retVal;
	}
	
	public static List<String> getInteractioApiRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("authentication");
		retVal.add("authenticationAdmin");
		retVal.add("validation");
		retVal.add("intApprove");
		retVal.add("intDraft");
		retVal.add("intDeleteInteractionByDesignerId");
		retVal.add("intUpdateInteractionHeader");
		retVal.add("intGetAll");
		retVal.add("intGetInteraction");
		retVal.add("intFindAllHeaders");
		retVal.add("intFindAllHeadersDeleted");
		retVal.add("intFindHeadersByPatternAndState");
		retVal.add("intFindHeadersDeletedByName");
		retVal.add("intFindHeaderByDesignerIdAndVersion");
		retVal.add("intFindInteractionByDesignerIdAndVersion");
		retVal.add("intDownloadInteraction");
		retVal.add("intGetPublicExecutionLink");
		retVal.add("intGetExecutionLink");
		return retVal;
	}
	
	public static List<String> getUserManagementRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("createUser");
		retVal.add("listOfUsers");
		retVal.add("listOfTenants");
		retVal.add("editUser");
		retVal.add("deleteUser");
		retVal.add("getCurrentUser");
		retVal.add("createTenant");
		retVal.add("createTrialTenant");
		retVal.add("updateTenant");
		retVal.add("getTenant");
		retVal.add("deleteTenant");
		retVal.add("changeTenantState");
		retVal.add("changeUserState");
		return retVal;
	}
	
	public static List<String> getVariablesRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("getVariables");
		retVal.add("addVariable");
		retVal.add("updateVariable");
		retVal.add("deleteVariable");
		retVal.add("getVariablesSetData");
		retVal.add("getServerVariablesXml");
		return retVal;
	}
	
	public static List<String> getAppKeyRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("appGetAppKeys");
		retVal.add("appCreateAppKey");
		retVal.add("appUpdateAppKey");
		retVal.add("appEnableDisableAppKey");
		retVal.add("appDeleteAppKey");
		retVal.add("appRegenerateAppKey");
		retVal.add("appOAuthLoginRequest");
		retVal.add("appAccessTokenRequest");
		return retVal;
	}
	
	public static List<String> getInteractioPointsRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("createRestIp");
		retVal.add("updateRestIp");
		retVal.add("createWsdlIp");
		retVal.add("updateWsdlIp");
		return retVal;
	}
	
	public static String getApplicationKey()
	{
		return "adminconsoleapplicationkey";
	}
	
	public static List<String> getPredefinedServers()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("http://172.23.33.48:8080");
		retVal.add("http://23.23.154.19:80");
		retVal.add("http://172.23.33.34:8080");
		retVal.add("http://172.23.33.35:8080");
		retVal.add("http://54.235.121.160:8080");
		retVal.add("http://172.23.33.36:8080");
		retVal.add("http://172.23.33.33:8080");
		retVal.add("http://172.23.38.38:8080");
		retVal.add("http://172.23.33.42:8080");
		return retVal;
	}

	public static List<String> getFolderRequests()
	{
		List<String> retVal = new ArrayList<String>();
		retVal.add("foldersPublish");
		retVal.add("foldersCapture");
		retVal.add("foldersCreate");
		retVal.add("foldersUpdate");
		retVal.add("foldersDelete");
		retVal.add("foldersMove");
		retVal.add("foldersFindOne");
		retVal.add("foldersFindAll");
		retVal.add("foldersFindByInteractionId");
		return retVal;	
	}
}
